# GIT #
## Ressources ##
### Fichier de configuration .gitconfig ###
Ce fichier permet de paramétrer git, notamment pour préciser les variables d'environnement et les alias de commandes.
Voici un exemple de fichier :
~~~~~~~
[user]
	name = <user name>
	email = <email>
[github]
	user = <GitHub user name>
[color]
	status = auto
	branch = auto
	diff = auto
	interactive = auto
[alias]
	st = status
	ci = commit
	co = checkout
	br = branch
	bra = branch -a
        cat = cat-file
	cfg = config

	diffi = diff -C --cached
	diffip = diff --no-color -p --cached
        dif = diff -C
        di = diff -C
        dii = diff -C --cached
        diffstat = diff -C --stat
        ds = diff -C --stat
        dsi = diff -C --stat --cached
        diffw = diff -C --ignore-all-space
        diffwi = diff -C --ignore-all-space --cached
        diffiw = diff -C --ignore-all-space --cached
        dw = diff -C --ignore-all-space
        dwi = diff -C --ignore-all-space --cached
        dsw = diff -C --stat --ignore-all-space
        dws = diff -C --stat --ignore-all-space
        dswi = diff -C --stat --ignore-all-space --cached
        dsiw = diff -C --stat --ignore-all-space --cached

        ls = ls-tree

	sm-st = submodule status
	sm-status = submodule status
	sm-init = submodule init
	sm = submodule
	smst = submodule status
	smup = submodule update
	sm-up = submodule update

	gcp = gc --prune
        gcpa = gc --prune --aggressive
        gr=!cd `git rev-parse --git-dir`/.. && git grep

	svnup=!git svn fetch && git svn rebase
        rewrite=!"d=`git rev-parse --git-dir`; git diff-index --quiet HEAD || { echo dirty index 2>&1; exit 1; }; f() { echo $1 >$d/rewrite; git branch | sed '/^[*] /!d;s///' >>$d/rewrite; test x"$1" = x && rm -f $d/rewrite && echo 'usage: rewrite <sha1>' || :; git checkout $1; }; f"
        rwdone=!"d=`git rev-parse --git-dir`; test -f $d/rewrite && git rebase --onto HEAD `cat $d/rewrite`"

	# Push only the current branch
	pushc = !"f() { mybranch=$(git cbr); git push origin \"$mybranch\"; }; f"
	pushfc = !"f() { mybranch=$(git cbr); git push -f origin \"$mybranch\"; }; f"

	# Diff and log between the origin and the local branch
	rdiff = !"f() { mybranch=$(git cbr); git dif origin/\"$mybranch\"..\"$mybranch\"; }; f"
	rlog = !"f() { mybranch=$(git cbr); git log origin/\"$mybranch\"..\"$mybranch\"; }; f"
	rlogp = !"f() { mybranch=$(git cbr); git log -p origin/\"$mybranch\"..\"$mybranch\"; }; f"

	rebase-i = rebase --interactive
	rebase-c = rebase --continue
	rebase-a = rebase --abort
	rebase-s = rebase --skip

	blame = blame -w
	lcfg = config --list

	# Current branch
	cbr = !"f() { git branch --no-color | sed -ne '/^\\* */s///p'; }; f"
        # New branch
        nbr = !"f() { test ! "x$1x" = xx && git br $1 && git push origin $1 && git br -d $1 && git cob $1; }; f"
        # Delete branch
        dbr = !"f() { test ! "x$1x" = xx && echo \"Deleting $1\" && git push origin :refs/heads/$1 && git br -D $1; }; f"
	# Checkout --track -b
	cob = !"f() { echo \"Checkout branch origin/$1\"; git checkout --track -b $1 origin/$1; }; f"
	# Fetch/rebase
	fr = !"f() { test ! "x$1x" = xx && echo \"Fetch/rebase on origin/$1\" && git fetch && git rebase origin/$1; }; f"
	# Fetch/rebase on current branch
	frc = !"f() { mybranch=$(git cbr); git fr \"$mybranch\"; }; f"
	# Automatic Fetch/rebase on current branch
	fra = !"f() { mybranch=$(git branch --no-color | sed -ne '/^\\* */s///p'); git fr \"$mybranch\"; }; f"

        # Rebase on current branch
        rc = !"f() { mybranch=$(git cbr); git rebase \"origin/$mybranch\"; }; f"
	# diff branch
	dbk = !"f() { gitk "master...$1"; }; f"
	lop = log -C -b -w -p
[core]
	excludesfile = /home/<username>/.gitignore
	editor = emacs
#        fileMode = false
#        ignoreCygwinFSTricks = true
[gui]
	fontui = -family helvetica -size 12 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family fixed -size 12 -weight normal -slant roman -underline 0 -overstrike 0
[help]
	format = man
[status]
	submodulesummary = true
	relativePaths = false
~~~~~~~

### Fichier de configuration .gitignore ###
Ce fichier permet de préciser les fichiers qui doivent être ignorés par Git. Pour ce faire, il doit être mentionné dans le .gitconfig comme suit :
~~~~~~~
[core]
	excludesfile = /home/<username>/.gitignore
~~~~~~~

Voici un exemple de fichier :
~~~~~~~
_build*
_inst*
*.o
*~
Thumbs.db
~~~~~~~

### Script d'ajout d'identité ###
Ce script a pour but de ne plus avoir à saisir le mot de passe de sa clé privé à chaque connexion.
/!\ L'utilisation de ce script nuit à votre sécurité.

Voici le fichier :
~~~~~~~
var=`ssh-agent -s`
eval "$var"
ssh-add ~/.ssh/id_dsa ~/.ssh/id_rsa
unset var
~~~~~~~

Pour l'utiliser, il faut le sourcer comme suit ou l'intégrer à votre .bashrc :
~~~~~~~
. ~/.ssh-add-identity
~~~~~~~




## Useful commands ##
### Change log information ###
~~~~~~~
git filter-branch -f --env-filter "GIT_AUTHOR_NAME='Newname'; GIT_AUTHOR_EMAIL='newemail'; GIT_COMMITTER_NAME='Newname'; GIT_COMMITTER_EMAIL='newemail';" HEAD
~~~~~~~

### Récupérer les modifications présentes sur le serveur ###
~~~~~~~
git fetch
git rebase origin/<Nom de la branche par rapport à qui se mettre à jour>
#exemple :
git rebase origin/master
~~~~~~~

### Mettre à jour le dépôt local par rapport au dépôt distant ###
~~~~~~~
git fra
~~~~~~~

### Faire un commit local ###
~~~~~~~
git status  # voir le status des fichiers
git add <Nouveaux fichiers>
git commit -m '<Message de commit>'
~~~~~~~

### Pousser les modifications sur le serveur ###
~~~~~~~
git push
~~~~~~~

### Créer une branche sur un serveur (remote) ###
~~~~~~~
 git push origin master:refs/heads/testing
 git cob testing          
 echo chiche_branch > test
 git ci -a -m 'Chiche test'
 git push                              # Attention, push toutes les branches où des commits ont été faits
                                             # Préférez donc cette version du push:
 git push origin testing    # Vous précisez la branche testing à pusher dans origin (le serveur)
~~~~~~~
ou bien 
~~~~~~~
git push origin master:refs/heads/testing     # will create the branch staging in the origin repository by copying the local master branch
~~~~~~~

### Merger 2 branches ###
~~~~~~~
git br crazy_idea
git br
    experimental
    crazy_idea
  * master
git co crazy_idea
git merge experimental       # merge experimental dans crazy_idea
                             # Si il ya des conflits => git diff et git status montreront les problemes
 git commit -a               # commit all changes
~~~~~~~

### Supprimer une branche locale ###
~~~~~~~
 git branch -d experimental          #Cette commande s'assure que les changement de la branche 'experimental' 
                                     #  se trouve dans la branche courante.
 git branch -D crazy_idea            # Si vous développez une idée folle, puis le regrettez, vous pouvez 
                                     #  toujours effacer cette branche avec -D
~~~~~~~

### Delete a Remote Branch ###
~~~~~~~
git push origin :testing                      #will delete the branch staging from the origin repository.
~~~~~~~
